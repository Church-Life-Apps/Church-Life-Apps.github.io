{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","components/FeedbackForm.tsx","utils/SecurityUtils.tsx","components/SettingsView.tsx","components/NavigationBar.tsx","pages/HomePage.tsx","utils/StringUtils.tsx","utils/TimeUtils.tsx","models/DbSong.tsx","utils/PlatformUtils.tsx","utils/SongUtils.tsx","utils/StorageUtils.tsx","database/DbManager.tsx","database/SongsTable.tsx","components/SearchView.tsx","pages/BookPage.tsx","tracking/GoogleAnalytics.tsx","tracking/EventFunctions.tsx","components/LyricView.tsx","components/MusicView.tsx","pages/SongPage.tsx","App.tsx","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","FeedbackScreen","encryptedtext","privateKey","SERVICE_ID","EMAIL_TEMPLATE","useState","fromWhom","setFromWhom","message","setMessage","feedbackResponseText","setFeedbackResponseText","feedbackResponseModal","setShowFeedbackResponseModal","emailjs","init","CryptoJS","AES","decrypt","toString","enc","Utf8","position","type","value","placeholder","onIonChange","detail","rows","expand","onClick","templateParams","from_name","send","response","console","log","status","text","error","sendEmail","isOpen","onDidDismiss","clearResponseModal","className","SettingsView","chosenSetting","setChosenSetting","FeedbackForm","color","NavigationBar","props","showSettingsModal","setShowSettingsModal","AppName","slot","backButtonOnClick","icon","homeOutline","RenderBackButton","toggleSongModeOnClick","musicalNotesOutline","swapHorizontalOutline","documentTextOutline","RenderToggleSongModeButton","settingsOutline","HomePage","to","removePunctuation","s","replace","stringSimilarity","require","getSimilarity","word","search","compareTwoStrings","toLowerCase","MILLIS_PER_MINUTE","MILLIS_PER_HOUR","MILLIS_PER_DAY","DbSong","songNumber","bookId","numHits","lastUsed","favorited","author","title","lyrics","timeInMillis","howLongAgo","Date","now","past","number","unit","Math","round","describeTime","PLACEHOLDER_SONG","sortDbSongs","songs","searchText","sort","a","b","scoreA","getMatchScore","scoreB","song","isCordova","isPlatform","SongViewMode","SHL_RESOURCE_JSON_KEY","shlJsonUrl","SHL_BOOK_ID","Storage","Plugins","storeItem","key","set","catch","getItem","get","VERSION","SCHEMA","SONGS_TABLE","SQL_DB_NAME","SONGS_TABLE_CONFIG","name","location","DbManager","songsTable","SQLite","create","db","executeSql","CREATE_SONGS_TABLE","window","openDatabase","changeVersion","transaction","this","undefined","instance","SONG_NUMBER","BOOK_ID","NUM_HITS","LAST_USED","FAVORITED","AUTHOR","TITLE","LYRICS","getSong","callback","query","descriptor","runQueryWithCallback","length","runQuerySingle","fetchSongsAndPopulateSongsTable","item","fetch","json","body","JSON","stringify","populateDatabase","parse","r","getInstance","getSongsTable","startTime","sql","queries","i","getInsertSongQuery","push","sqlBatch","formatStringForSql","mapToSongList","_transaction","runQuery","row","SearchView","useParams","songCards","setSongCards","entries","songCardsIterator","history","useHistory","LoadSongs","onIonInfinite","event","target","disabled","Array","from","complete","loadingSpinner","loadingText","songIterator","count","nextSong","next","done","GenerateSongCard","BookPage","searchString","setSearchString","setSongs","useEffect","timeOutId","setTimeout","updatedCallback","isNaN","listSongsBySearchText","isInitialized","filter","clearTimeout","Event","category","action","label","ReactGA","triggerSongView","mode","String","LyricView","setSong","Lyrics","songLyrics","verses","forEach","versenumber","line","lines","getLyrics","songsWithTwoTunes","MusicView","num","widthPixels","innerWidth","secondTune","setSecondTune","width","setWidth","zoomed","setZoomed","songHasTwoTunes","includes","secondTuneSuffix","url","baseUrl","Music","checked","style","onDoubleClick","src","alt","SongPage","songId","songViewMode","setSongViewMode","initialize","pageview","pathname","App","getPlatforms","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"yHAAA,IAAIA,EAAM,CACT,kCAAmC,CAClC,IACA,IAED,iCAAkC,CACjC,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,iCAAkC,CACjC,IACA,IAED,gCAAiC,CAChC,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,gCAAiC,CAChC,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,qBAAsB,CACrB,IACA,IAED,uCAAwC,CACvC,IACA,IAED,sCAAuC,CACtC,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,mCAAoC,CACnC,IACA,IAED,kCAAmC,CAClC,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,kCAAmC,CAClC,IACA,IAED,iCAAkC,CACjC,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,iCAAkC,CACjC,IACA,IAED,gCAAiC,CAChC,IACA,IAED,+BAAg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","file":"static/js/main.0b471d84.chunk.js","sourcesContent":["var map = {\n\t\"./ion-action-sheet-ios.entry.js\": [\n\t\t328,\n\t\t11\n\t],\n\t\"./ion-action-sheet-md.entry.js\": [\n\t\t329,\n\t\t12\n\t],\n\t\"./ion-alert-ios.entry.js\": [\n\t\t330,\n\t\t13\n\t],\n\t\"./ion-alert-md.entry.js\": [\n\t\t331,\n\t\t14\n\t],\n\t\"./ion-app_8-ios.entry.js\": [\n\t\t332,\n\t\t15\n\t],\n\t\"./ion-app_8-md.entry.js\": [\n\t\t333,\n\t\t16\n\t],\n\t\"./ion-avatar_3-ios.entry.js\": [\n\t\t334,\n\t\t33\n\t],\n\t\"./ion-avatar_3-md.entry.js\": [\n\t\t335,\n\t\t34\n\t],\n\t\"./ion-back-button-ios.entry.js\": [\n\t\t336,\n\t\t35\n\t],\n\t\"./ion-back-button-md.entry.js\": [\n\t\t337,\n\t\t36\n\t],\n\t\"./ion-backdrop-ios.entry.js\": [\n\t\t338,\n\t\t77\n\t],\n\t\"./ion-backdrop-md.entry.js\": [\n\t\t339,\n\t\t78\n\t],\n\t\"./ion-button_2-ios.entry.js\": [\n\t\t340,\n\t\t37\n\t],\n\t\"./ion-button_2-md.entry.js\": [\n\t\t341,\n\t\t38\n\t],\n\t\"./ion-card_5-ios.entry.js\": [\n\t\t342,\n\t\t39\n\t],\n\t\"./ion-card_5-md.entry.js\": [\n\t\t343,\n\t\t40\n\t],\n\t\"./ion-checkbox-ios.entry.js\": [\n\t\t344,\n\t\t41\n\t],\n\t\"./ion-checkbox-md.entry.js\": [\n\t\t345,\n\t\t42\n\t],\n\t\"./ion-chip-ios.entry.js\": [\n\t\t346,\n\t\t43\n\t],\n\t\"./ion-chip-md.entry.js\": [\n\t\t347,\n\t\t44\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t348,\n\t\t79\n\t],\n\t\"./ion-datetime_3-ios.entry.js\": [\n\t\t349,\n\t\t21\n\t],\n\t\"./ion-datetime_3-md.entry.js\": [\n\t\t350,\n\t\t22\n\t],\n\t\"./ion-fab_3-ios.entry.js\": [\n\t\t351,\n\t\t45\n\t],\n\t\"./ion-fab_3-md.entry.js\": [\n\t\t352,\n\t\t46\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t353,\n\t\t80\n\t],\n\t\"./ion-infinite-scroll_2-ios.entry.js\": [\n\t\t354,\n\t\t81\n\t],\n\t\"./ion-infinite-scroll_2-md.entry.js\": [\n\t\t355,\n\t\t82\n\t],\n\t\"./ion-input-ios.entry.js\": [\n\t\t356,\n\t\t47\n\t],\n\t\"./ion-input-md.entry.js\": [\n\t\t357,\n\t\t48\n\t],\n\t\"./ion-item-option_3-ios.entry.js\": [\n\t\t358,\n\t\t49\n\t],\n\t\"./ion-item-option_3-md.entry.js\": [\n\t\t359,\n\t\t50\n\t],\n\t\"./ion-item_8-ios.entry.js\": [\n\t\t360,\n\t\t51\n\t],\n\t\"./ion-item_8-md.entry.js\": [\n\t\t361,\n\t\t52\n\t],\n\t\"./ion-loading-ios.entry.js\": [\n\t\t362,\n\t\t53\n\t],\n\t\"./ion-loading-md.entry.js\": [\n\t\t363,\n\t\t54\n\t],\n\t\"./ion-menu_3-ios.entry.js\": [\n\t\t364,\n\t\t55\n\t],\n\t\"./ion-menu_3-md.entry.js\": [\n\t\t365,\n\t\t56\n\t],\n\t\"./ion-modal-ios.entry.js\": [\n\t\t366,\n\t\t17\n\t],\n\t\"./ion-modal-md.entry.js\": [\n\t\t367,\n\t\t18\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t368,\n\t\t29\n\t],\n\t\"./ion-popover-ios.entry.js\": [\n\t\t369,\n\t\t19\n\t],\n\t\"./ion-popover-md.entry.js\": [\n\t\t370,\n\t\t20\n\t],\n\t\"./ion-progress-bar-ios.entry.js\": [\n\t\t371,\n\t\t57\n\t],\n\t\"./ion-progress-bar-md.entry.js\": [\n\t\t372,\n\t\t58\n\t],\n\t\"./ion-radio_2-ios.entry.js\": [\n\t\t373,\n\t\t59\n\t],\n\t\"./ion-radio_2-md.entry.js\": [\n\t\t374,\n\t\t60\n\t],\n\t\"./ion-range-ios.entry.js\": [\n\t\t375,\n\t\t61\n\t],\n\t\"./ion-range-md.entry.js\": [\n\t\t376,\n\t\t62\n\t],\n\t\"./ion-refresher_2-ios.entry.js\": [\n\t\t377,\n\t\t23\n\t],\n\t\"./ion-refresher_2-md.entry.js\": [\n\t\t378,\n\t\t24\n\t],\n\t\"./ion-reorder_2-ios.entry.js\": [\n\t\t379,\n\t\t31\n\t],\n\t\"./ion-reorder_2-md.entry.js\": [\n\t\t380,\n\t\t32\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t381,\n\t\t83\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t382,\n\t\t63\n\t],\n\t\"./ion-searchbar-ios.entry.js\": [\n\t\t383,\n\t\t64\n\t],\n\t\"./ion-searchbar-md.entry.js\": [\n\t\t384,\n\t\t65\n\t],\n\t\"./ion-segment_2-ios.entry.js\": [\n\t\t385,\n\t\t66\n\t],\n\t\"./ion-segment_2-md.entry.js\": [\n\t\t386,\n\t\t67\n\t],\n\t\"./ion-select_3-ios.entry.js\": [\n\t\t387,\n\t\t68\n\t],\n\t\"./ion-select_3-md.entry.js\": [\n\t\t388,\n\t\t69\n\t],\n\t\"./ion-slide_2-ios.entry.js\": [\n\t\t389,\n\t\t84\n\t],\n\t\"./ion-slide_2-md.entry.js\": [\n\t\t390,\n\t\t85\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t391,\n\t\t27\n\t],\n\t\"./ion-split-pane-ios.entry.js\": [\n\t\t392,\n\t\t86\n\t],\n\t\"./ion-split-pane-md.entry.js\": [\n\t\t393,\n\t\t87\n\t],\n\t\"./ion-tab-bar_2-ios.entry.js\": [\n\t\t394,\n\t\t70\n\t],\n\t\"./ion-tab-bar_2-md.entry.js\": [\n\t\t395,\n\t\t71\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t396,\n\t\t30\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t397,\n\t\t72\n\t],\n\t\"./ion-textarea-ios.entry.js\": [\n\t\t398,\n\t\t73\n\t],\n\t\"./ion-textarea-md.entry.js\": [\n\t\t399,\n\t\t74\n\t],\n\t\"./ion-toast-ios.entry.js\": [\n\t\t400,\n\t\t75\n\t],\n\t\"./ion-toast-md.entry.js\": [\n\t\t401,\n\t\t76\n\t],\n\t\"./ion-toggle-ios.entry.js\": [\n\t\t402,\n\t\t25\n\t],\n\t\"./ion-toggle-md.entry.js\": [\n\t\t403,\n\t\t26\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t404,\n\t\t88\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 195;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t406,\n\t\t91\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 197;\nmodule.exports = webpackAsyncContext;","import { IonButton, IonInput, IonItem, IonLabel, IonModal, IonTextarea } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport \"./Components.css\";\nimport emailjs from \"emailjs-com\";\nimport { decrypt } from \"../utils/SecurityUtils\";\n\n/**\n * Feedback Screen.\n *\n * Uses EmailJS as a service to send emails.\n * This class will send actual emails when people have feedback.\n */\nconst FeedbackScreen: React.FC = () => {\n  const ENCRYPTED_USER_ID = \"U2FsdGVkX19ijiVnA6XtmJ4wa/RL9NngWwn4uKfq6gO+4ZI/V1F/RCYL4REfk0tZ\";\n  const PRIVATE_KEY = \"jesus private key\";\n  const SERVICE_ID = \"hymnal_app_service_id\";\n  const EMAIL_TEMPLATE = \"template_z4z7bhi\";\n\n  const [fromWhom, setFromWhom] = useState<string>(\"\");\n  const [message, setMessage] = useState<string>(\"\");\n  const [feedbackResponseText, setFeedbackResponseText] = useState<string>(\"\");\n  const [feedbackResponseModal, setShowFeedbackResponseModal] = useState<boolean>(false);\n\n  emailjs.init(decrypt(ENCRYPTED_USER_ID, PRIVATE_KEY));\n\n  return (\n    <div id=\"feedbackFormDiv\">\n      <IonItem>\n        <IonLabel position=\"floating\">Name</IonLabel>\n        <IonInput\n          type=\"text\"\n          value={fromWhom}\n          placeholder=\"Enter your name\"\n          onIonChange={(e) => setFromWhom(e.detail.value as string)}\n        ></IonInput>\n      </IonItem>\n      <IonItem>\n        <IonLabel position=\"floating\">What do you think?</IonLabel>\n        <IonTextarea\n          rows={7}\n          value={message}\n          placeholder=\"Enter feedback\"\n          onIonChange={(e) => setMessage(e.detail.value as string)}\n        ></IonTextarea>\n      </IonItem>\n\n      <IonButton expand=\"full\" onClick={() => sendEmail()}>\n        Submit Feedback\n      </IonButton>\n\n      <IonModal id=\"feedbackResponseModal\" isOpen={feedbackResponseModal} onDidDismiss={() => clearResponseModal()}>\n        <h1 className=\"center\">{feedbackResponseText}</h1>\n        <IonButton id=\"feedbackResponseOKButton\" onClick={() => clearResponseModal()}>\n          OK\n        </IonButton>\n      </IonModal>\n    </div>\n  );\n\n  /**\n   * Sends an email to the hymnal dev team when someone has feedback.\n   */\n  function sendEmail() {\n    const templateParams = {\n      from_name: fromWhom,\n      message: message,\n    };\n    if (message === \"\" || fromWhom === \"\") {\n      setFeedbackResponseText(\"Please tell us your name and feedback message!\");\n    } else {\n      emailjs.send(SERVICE_ID, EMAIL_TEMPLATE, templateParams).then(\n        function (response) {\n          console.log(\"Email sent successfully.\", response.status, response.text);\n          setFeedbackResponseText(\"Feedback Submitted Sucessfully, Thanks!\");\n        },\n        function (error) {\n          setFeedbackResponseText(`Error Submitting Feedback: ${error}`);\n          console.log(\"Error sending email: \", error);\n        }\n      );\n      clearForm();\n    }\n    setShowFeedbackResponseModal(true);\n  }\n\n  // Clears form fields.\n  function clearForm() {\n    setFromWhom(\"\");\n    setMessage(\"\");\n  }\n\n  // Clears and hides Response modal.\n  function clearResponseModal() {\n    setFeedbackResponseText(\"\");\n    setShowFeedbackResponseModal(false);\n  }\n};\n\nexport default FeedbackScreen;\n","/**\n * Helper functions for Security stuff.\n */\n\nimport CryptoJS from \"crypto-js\";\n\n/**\n * Uses AES to encrypt some text with the given private key.\n */\nexport function encrypt(normalText: string, privateKey: string): string {\n  return CryptoJS.AES.encrypt(normalText, privateKey).toString();\n}\n\n/**\n * Uses AES to decrypt some text with the given private key.\n */\nexport function decrypt(encryptedtext: string, privateKey: string): string {\n  return CryptoJS.AES.decrypt(encryptedtext, privateKey).toString(CryptoJS.enc.Utf8);\n}\n","import { IonButton, IonContent, IonItem, IonLabel, IonList } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport \"./Components.css\";\nimport FeedbackForm from \"./FeedbackForm\";\n\n/**\n * Settings Page.\n */\nconst SettingsView: React.FC = () => {\n  const [chosenSetting, setChosenSetting] = useState<string>(\"\");\n\n  return (\n    <IonContent>\n      {/* To add another settings item, add another IonItem with an IonLabel. */}\n      {/* TODO: Add Font Size as an option. */}\n      {chosenSetting === \"\" ? (\n        <IonList>\n          <IonItem id=\"settingsTitle\">\n            <IonLabel>Settings</IonLabel>\n          </IonItem>\n          <IonItem>\n            <IonButton onClick={() => setChosenSetting(\"feedback\")}>Submit Feedback</IonButton>\n          </IonItem>\n        </IonList>\n      ) : null}\n\n      {chosenSetting === \"feedback\" ? <FeedbackForm /> : null}\n\n      {chosenSetting !== \"\" ? (\n        <IonButton color=\"light\" expand=\"full\" id=\"backToSettingsButton\" onClick={() => setChosenSetting(\"\")}>\n          Return to Settings\n        </IonButton>\n      ) : null}\n    </IonContent>\n  );\n};\n\nexport default SettingsView;\n","import { IonButton, IonTitle, IonToolbar, IonButtons, IonModal, IonIcon } from \"@ionic/react\";\nimport \"./Components.css\";\nimport {\n  documentTextOutline,\n  homeOutline,\n  musicalNotesOutline,\n  settingsOutline,\n  swapHorizontalOutline,\n} from \"ionicons/icons\";\nimport React, { useState } from \"react\";\nimport SettingsView from \"../components/SettingsView\";\nimport { AppName } from \"../App\";\n\ninterface NavigationBarProps {\n  backButtonOnClick?: () => void;\n  toggleSongModeOnClick?: () => void;\n}\n\n/**\n * Navigation Bar Component\n */\nconst NavigationBar: React.FC<NavigationBarProps> = (props) => {\n  // whether or not to show settings modal\n  const [showSettingsModal, setShowSettingsModal] = useState<boolean>(false);\n\n  return (\n    <IonToolbar>\n      {/* [eric] we can probably come up with a better name, right? */}\n      <IonTitle id=\"appName\">{AppName}</IonTitle>\n      <IonButtons slot=\"start\">{RenderBackButton()}</IonButtons>\n      <IonButtons slot=\"primary\">\n        {RenderToggleSongModeButton()}\n        {/* TODO: Put this Image/Lyric mode button into settings page. \n          This might require some react magic to get state from a child component */}\n        <IonButton onClick={() => setShowSettingsModal(true)}>\n          <IonIcon icon={settingsOutline} />\n        </IonButton>\n      </IonButtons>\n\n      {/* Settings Menu Popup  */}\n      <IonModal id=\"settingsModal\" isOpen={showSettingsModal} onDidDismiss={() => setShowSettingsModal(false)}>\n        <SettingsView />\n        <IonButton id=\"returnToHymnalButton\" onClick={() => setShowSettingsModal(false)}>\n          Back to Hymnal\n        </IonButton>\n      </IonModal>\n    </IonToolbar>\n  );\n\n  function RenderBackButton() {\n    if (!props.backButtonOnClick) {\n      return null;\n    }\n\n    return (\n      <IonButton onClick={props.backButtonOnClick}>\n        <IonIcon icon={homeOutline} />\n      </IonButton>\n    );\n  }\n\n  function RenderToggleSongModeButton() {\n    if (!props.toggleSongModeOnClick) {\n      return null;\n    }\n\n    return (\n      <IonButton id=\"songViewToggler\" onClick={props.toggleSongModeOnClick}>\n        <IonIcon icon={musicalNotesOutline} />\n        <IonIcon icon={swapHorizontalOutline} />\n        <IonIcon icon={documentTextOutline} />\n      </IonButton>\n    );\n  }\n};\n\nexport default NavigationBar;\n","import { IonContent, IonPage, IonHeader } from \"@ionic/react\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport React from \"react\";\nimport { Redirect } from \"react-router\";\n\n/**\n * Home Page Component.\n *\n * Use 'useState' for dynamic variables.\n * When the variable changes, the places where it's being used are automatically re-rendered.\n */\nconst HomePage: React.FC = () => {\n  return (\n    <IonPage>\n      <IonHeader>\n        <NavigationBar />\n      </IonHeader>\n\n      <IonContent>\n        {/* Redirect to book page until we add more book or make this page functional */}\n        <Redirect to=\"shl\" />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default HomePage;\n","/**\n * Util functions for strings.\n */\n\n/**\n * Removes special characters from the string.\n */\nexport function removePunctuation(s: string): string {\n  return s.replace(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g, \"\");\n}\n\nconst stringSimilarity = require(\"string-similarity\"); // eslint-disable-line @typescript-eslint/no-var-requires\n\n/**\n * Returns a number between 0 and 1 based on how similar two strings are to each other (Case sensitive).\n * 0 = completely different.\n * 1 = the same string.\n */\nexport function getSimilarity(word: string, search: string): number {\n  return stringSimilarity.compareTwoStrings(removePunctuation(word.toString().toLowerCase()), search);\n}\n\n/**\n * Returns true if a string is a number, false otherwise.\n */\nexport function isNumeric(word: string): boolean {\n  return !isNaN(+word);\n}\n","/**\n * Utility functions related to time.\n */\n\nexport const MILLIS_PER_SECOND = 1000;\nexport const MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;\nexport const MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;\nexport const MILLIS_PER_DAY = 24 * MILLIS_PER_HOUR;\nexport const MILLIS_PER_WEEK = 7 * MILLIS_PER_DAY;\nexport const MILLIS_PER_MONTH = 30 * MILLIS_PER_DAY;\nexport const MILLIS_PER_YEAR = 365 * MILLIS_PER_DAY;\n\n/**\n * Turns a timestamp from milliseconds to a formatted Date.\n */\nexport function formatDate(timeInMillis: number): string {\n  const date = new Date(timeInMillis);\n  return date.toUTCString();\n}\n\n/**\n * Returns how long ago a timestamp was from now, or how far into the future it is.\n */\nexport function describeTime(timeInMillis: number): string {\n  if (timeInMillis === 0) {\n    return \"\";\n  }\n  let howLongAgo = Date.now() - timeInMillis;\n  let past = true;\n  if (howLongAgo < 0) {\n    past = false;\n    howLongAgo = howLongAgo * -1;\n  }\n  let number = 0;\n  let unit = \"\";\n  if (howLongAgo > MILLIS_PER_DAY) {\n    number = Math.round(howLongAgo / MILLIS_PER_DAY);\n    unit = \"days\";\n    if (number === 1) {\n      unit = \"day\";\n    }\n  } else if (howLongAgo > MILLIS_PER_HOUR) {\n    number = Math.round(howLongAgo / MILLIS_PER_HOUR);\n    unit = \"hours\";\n    if (number === 1) {\n      unit = \"hour\";\n    }\n  } else if (howLongAgo > MILLIS_PER_MINUTE) {\n    number = Math.round(howLongAgo / MILLIS_PER_MINUTE);\n    unit = \"minutes\";\n    if (number === 1) {\n      unit = \"minute\";\n    }\n  } else {\n    number = Math.round(howLongAgo / MILLIS_PER_SECOND);\n    unit = \"seconds\";\n    if (number === 1) {\n      unit = \"second\";\n    }\n  }\n  if (past) {\n    return `${number} ${unit} ago.`;\n  } else {\n    return `In ${number} ${unit}.`;\n  }\n}\n","import { getSimilarity, removePunctuation } from \"../utils/StringUtils\";\nimport { describeTime } from \"../utils/TimeUtils\";\n\n/**\n * Model for a DbSong object in the Songs table\n */\nexport class DbSong {\n  constructor(\n    public songNumber: number,\n    public bookId: string,\n    public numHits: number,\n    public lastUsed: number,\n    public favorited: boolean,\n    public author: string,\n    public title: string,\n    public lyrics: string\n  ) {}\n\n  public toString = (): string => {\n    return `Song ${this.songNumber} in book ${this.bookId}: ${this.title} by ${this.author}. numHits: ${\n      this.numHits\n    }, lastUsed: ${describeTime(this.lastUsed)}, favorited: ${this.favorited}.`;\n  };\n}\n\nexport const PLACEHOLDER_SONG = new DbSong(0, \"\", 0, 0, false, \"\", \"\", \"{}\");\n\n// Songs that match below this threshold will be ordered by number. Usually this means the song got matched by author.\nconst MATCH_THRESHOLD = 0.22;\n\n/**\n * Sorts a list of DbSongs based on how closely they match to the given searchText.\n */\nexport function sortDbSongs(songs: DbSong[], searchText: string): DbSong[] {\n  const search = removePunctuation(searchText.toLowerCase());\n  return songs.sort((a, b) => {\n    const scoreA = getMatchScore(a, search);\n    const scoreB = getMatchScore(b, search);\n    if (scoreA <= MATCH_THRESHOLD && scoreB <= MATCH_THRESHOLD) {\n      return a.songNumber - b.songNumber;\n    }\n    return scoreB - scoreA;\n  });\n}\n\n/**\n * Gets a score determining how well the song matches the search text.\n * The title is much shorter by length, so matches in the title will naturally weigh more than matches in the lyrics.\n */\nfunction getMatchScore(song: DbSong, search: string) {\n  return getSimilarity(song.title, search) + getSimilarity(song.lyrics, search) + getSimilarity(song.author, search);\n}\n","import { getPlatforms, isPlatform } from \"@ionic/react\";\n\n/**\n * Platform Utils:\n *\n * Android: Current platforms: android,cordova,capacitor,mobile,hybrid\n * iOS:\n * Chrome Mobile Mode: Current platforms: android,tablet,mobile,mobileweb\n * Chrome Regular Desktop: Current platforms: desktop\n */\n\n/**\n * Returns true if this is app currently running on an iOS device.\n */\nexport function isIOS(): boolean {\n  return isPlatform(\"ios\");\n}\n\n/**\n * Returns true if this app is currently running on an Android device.\n */\nexport function isAndroid(): boolean {\n  return isPlatform(\"android\");\n}\n\n/**\n * Returns true if this app is currently running on the desktop.\n */\nexport function isBrowser(): boolean {\n  return isPlatform(\"desktop\");\n}\n\n/**\n * Returns true if the platform supports Cordova.\n *\n * * SQLite requires Cordova.\n */\nexport function isCordova(): boolean {\n  return isPlatform(\"cordova\");\n}\n\nexport function logPlatforms(): void {\n  console.log(\"Current platforms: \" + getPlatforms());\n}\n","/**\n * Helpers for Song Related things.\n *\n * Write the helper function here, and then use them by importing it by relative path like:\n *\n * import { makeThreeDigits } from '../utils/SongUtils'\n */\n\nexport const SHL_RESOURCE_JSON_KEY = \"Songs and Hymns of Life\";\n\nexport const shlJsonUrl =\n  \"https://raw.githubusercontent.com/Church-Life-Apps/Resources/master/resources/metadata/shl.json\";\n\nexport const SHL_BOOK_ID = \"shl\";\n\n/**\n * Prepends 0s onto a 1 or 2 digit number to make it look like a 3 digit number.\n */\nexport function makeThreeDigits(num: number): string {\n  if (num < 10) {\n    return `00${num}`;\n  } else if (num < 100) {\n    return `0${num}`;\n  } else {\n    return `${num}`;\n  }\n}\n\nexport enum SongViewMode {\n  Music,\n  Lyrics,\n}\n\n/**\n * Fields from the shl.json resource file.\n * Add more fields here when they are required in the app.\n */\nexport interface Song {\n  title: string;\n  author: string;\n  songNumber: number;\n  lyrics: string;\n}\n","import { Plugins } from \"@capacitor/core\";\n\n/**\n * Utilities for storing Simple Key-Value pair data locally.\n * On web this uses browser cache, on Android it uses SharedPreferences, on iOS it uses UserDefaults.\n */\n\nconst { Storage } = Plugins;\n\nexport const YES = \"yes\";\nexport const NO = \"no\";\n\n/**\n * Stores an item with given key/value pair. The value can be any string, including JSON strings.\n * If an item with that key already existed, it will overwrite the value.\n */\nexport async function storeItem(key: string, value: string): Promise<void> {\n  return Storage.set({\n    key: key,\n    value: value,\n  }).catch((error) => {\n    console.log(`Error storing item because ${error}.`);\n  });\n}\n\n/**\n * Retrieves an item with the given key, or blank if not found.\n */\nexport async function getItem(key: string): Promise<string> {\n  const value = (await Storage.get({ key: key })).value;\n  if (value === null) {\n    return \"\";\n  }\n  return value;\n}\n\n/**\n * Clears all values from the storage cache.\n */\nexport function clearCache(): void {\n  console.log(\"Clearing Local Cache.\");\n  Storage.clear();\n}\n","import { SQLiteDatabaseConfig, SQLiteObject, SQLite } from \"@ionic-native/sqlite\";\nimport { isCordova } from \"../utils/PlatformUtils\";\n\nconst VERSION = \"1.0\";\nconst SCHEMA = `hymnal_1`;\nexport const SONGS_TABLE = `songs_2`;\nconst SQL_DB_NAME = `${SCHEMA}.${SONGS_TABLE}`;\nconst SONGS_TABLE_CONFIG: SQLiteDatabaseConfig = {\n  name: SQL_DB_NAME,\n  location: \"default\",\n};\n\nexport const DATABASE_INITIALIZED = \"databaseInitialized\";\nexport const LYRICS_ONLY_MODE = \"lyricsOnlyMode\";\ndeclare const window: { openDatabase: (arg0: string, arg1: string, arg2: string, arg3: number) => Database };\n\n/**\n * Overall Database stuff.\n * This class defines all the tables and instantiates them as a singleton database object when the app starts up.\n */\nexport class DbManager {\n  private static instance: DbManager;\n  private songsTable: SQLiteObject | Database | undefined;\n\n  /**\n   * Constructs the SQLiteObject used to make queries.\n   * Creating the DB is asynchronous so just initiate it when the app starts and hope the\n   * DB is not called again too quickly after so the songsTable object has time to initialize.\n   */\n  private constructor() {\n    if (isCordova()) {\n      // Mobile app, use SQLite.\n      try {\n        SQLite.create(SONGS_TABLE_CONFIG).then((db) => {\n          this.songsTable = db;\n          db.executeSql(CREATE_SONGS_TABLE).then(() => {\n            console.log(`Successfully opened SQLite database schema ${SCHEMA} and created table: ${SONGS_TABLE}.`);\n          });\n        });\n      } catch (e) {\n        console.log(\"Error creating SQLite database: \" + e + e.message);\n      }\n    } else {\n      // Not Mobile app, so use WebSQL to generate the SQLiteObject used for queries.\n      try {\n        const db: Database = window.openDatabase(SCHEMA, VERSION, SQL_DB_NAME, 5 * 1024 * 1024);\n        db.changeVersion(\n          VERSION,\n          VERSION,\n          (transaction) => {\n            transaction.executeSql(CREATE_SONGS_TABLE);\n          },\n          (error) => {\n            console.log(`Error creating database ${SQL_DB_NAME} because ${error}, ${error.message}`);\n          },\n          () => {\n            this.songsTable = db;\n            console.log(`Successfully opened WebSQL database schema: ${SCHEMA} and created table: ${SONGS_TABLE}.`);\n          }\n        );\n      } catch (e) {\n        console.log(\"Error creating the WebSQL database: \" + e + e.message);\n      }\n    }\n  }\n\n  get getSongsTable(): SQLiteObject | Database | undefined {\n    return this.songsTable;\n  }\n\n  static isInitialized(): boolean {\n    return DbManager.instance !== undefined && DbManager.instance.songsTable !== undefined;\n  }\n\n  static getInstance(): DbManager {\n    if (!DbManager.instance) {\n      DbManager.instance = new DbManager();\n    }\n    return DbManager.instance;\n  }\n}\n\n/**\n * Songs Table Constants and CREATE query.\n */\nexport const SONG_NUMBER = \"song_number\";\nexport const BOOK_ID = \"book_id\";\nexport const NUM_HITS = \"num_hits\";\nexport const LAST_USED = \"last_used\";\nexport const FAVORITED = \"favorited\";\nexport const AUTHOR = \"author\";\nexport const TITLE = \"title\";\nexport const LYRICS = \"lyrics\";\n\nconst CREATE_SONGS_TABLE = `CREATE VIRTUAL TABLE IF NOT EXISTS ${SONGS_TABLE} USING FTS3(\n  ${SONG_NUMBER},\n  ${BOOK_ID},\n  ${NUM_HITS},\n  ${LAST_USED},\n  ${FAVORITED},\n  ${AUTHOR},\n  ${TITLE},\n  ${LYRICS},\n  tokenize=porter);`;\n","import { SQLiteObject } from \"@ionic-native/sqlite\";\nimport { DbSong, sortDbSongs } from \"../models/DbSong\";\nimport { isCordova } from \"../utils/PlatformUtils\";\nimport { shlJsonUrl, SHL_BOOK_ID, SHL_RESOURCE_JSON_KEY, Song } from \"../utils/SongUtils\";\nimport { getItem, storeItem } from \"../utils/StorageUtils\";\nimport {\n  AUTHOR,\n  BOOK_ID,\n  DbManager,\n  FAVORITED,\n  LAST_USED,\n  LYRICS,\n  NUM_HITS,\n  SONGS_TABLE,\n  SONG_NUMBER,\n  TITLE,\n} from \"./DbManager\";\n\n/**\n * Retrieves a single song from the DB for the requested song number and updates the num_hits of that song.\n */\nexport function getSong(songNumber: number, callback: (song: DbSong | null) => void): void {\n  const query = `SELECT * FROM ${SONGS_TABLE} WHERE ${SONG_NUMBER}=${songNumber} AND ${BOOK_ID}='${SHL_BOOK_ID}'`;\n  runQuerySingle(query, `Getting song ${songNumber}`, callback);\n}\n\n/**\n * Updates the favorited field for the provided song number.\n */\nexport function updateSongFavorited(songNumber: number, favorited: boolean): void {\n  const query = `UPDATE ${SONGS_TABLE} SET ${FAVORITED}=${favorited} WHERE ${SONG_NUMBER}=${songNumber} AND ${BOOK_ID}='${SHL_BOOK_ID}'`;\n\n  runQuery(query, `Set ${songNumber} favorited to ${favorited}.`);\n}\n\n/**\n * Gets all songs from the database sorted by when they were last used.\n */\nexport function getSongsSortedByLastUsed(callback: (songs: DbSong[]) => void): void {\n  const query = `SELECT * FROM ${SONGS_TABLE} WHERE ${LAST_USED} > 0 ORDER BY ${LAST_USED} DESC`;\n\n  runQueryWithCallback(query, `Select songs ordered by last_used.`, callback);\n}\n\n/**\n * Gets all favorited songs from the database.\n */\nexport function getFavoriteSongs(callback: (songs: DbSong[]) => void): void {\n  const query = `SELECT * FROM ${SONGS_TABLE} WHERE ${FAVORITED}=true ORDER BY ${NUM_HITS} DESC`;\n\n  runQueryWithCallback(query, `Select Favorited Songs`, callback);\n}\n\n/**\n * Lists all songs in the DB that match the text.\n */\nexport function listSongsBySearchText(searchText: string, callback: (songs: DbSong[]) => void): void {\n  let query: string;\n  let updatedCallback = callback;\n  if (searchText === \"\") {\n    query = `SELECT * FROM ${SONGS_TABLE}`;\n  } else if (!isNaN(+searchText)) {\n    query = `SELECT * FROM ${SONGS_TABLE} WHERE ${SONG_NUMBER} MATCH '${searchText}*'`;\n  } else {\n    query = `SELECT * FROM ${SONGS_TABLE} WHERE ${SONGS_TABLE} MATCH '${formatStringForSql(searchText)}'`;\n    updatedCallback = (songs: DbSong[]) => {\n      callback(sortDbSongs(songs, searchText));\n    };\n  }\n  runQueryWithCallback(query, `List songs by search text: \"${searchText}\"`, updatedCallback);\n}\n\n/**\n * Increments the num_hits by 1 and updates last_used time to now for the song number provided.\n */\nexport function updateSongHits(songNumber: number): void {\n  const query =\n    `UPDATE ${SONGS_TABLE} SET ${NUM_HITS}=${NUM_HITS} + 1, ${LAST_USED}=${Date.now()} ` +\n    `WHERE ${SONG_NUMBER}=${songNumber} AND ${BOOK_ID}='${SHL_BOOK_ID}'`;\n  runQuery(query, `Update hits for song ${songNumber}.`);\n}\n\n/**\n * Fetches the song list from online, trigger populating the database with the songs,\n * then returns the fetched songs immediately.\n */\nexport async function fetchSongsAndPopulateSongsTable(): Promise<Song[]> {\n  return getItem(SHL_BOOK_ID)\n    .then(async (item) => {\n      if (!item) {\n        const response = await fetch(shlJsonUrl);\n        const body = await response.json();\n        storeItem(SHL_BOOK_ID, JSON.stringify(body));\n        populateDatabase(body[SHL_RESOURCE_JSON_KEY], SHL_BOOK_ID);\n        return body[SHL_RESOURCE_JSON_KEY];\n      } else {\n        console.log(\"Returning stored songs Json.\");\n        const songs = JSON.parse(item)[SHL_RESOURCE_JSON_KEY];\n        populateDatabase(songs, SHL_BOOK_ID);\n        return songs;\n      }\n    })\n    .catch((r) => {\n      console.error(r);\n      return [];\n    });\n}\n\n/**\n * Given a list of Songs, populate the database with that song list and book id.\n * For both mobile/browser, Keep all queries under 1 transaction. Multiple transactions are more expensive.\n */\nfunction populateDatabase(songs: Song[], bookId: string): void {\n  const songsTable = DbManager.getInstance().getSongsTable;\n  if (songsTable === undefined) {\n    console.log(`Cannot populate DB it is undefined.`);\n    return;\n  }\n  try {\n    const startTime = Date.now();\n    if (!isCordova()) {\n      // Not Mobile.\n      const sql = songsTable as Database;\n      sql.transaction(\n        (transaction) => {\n          for (let i = 0; i < songs.length; ++i) {\n            const song = songs[i];\n            const query = getInsertSongQuery(song, bookId);\n            transaction.executeSql(query);\n          }\n        },\n        (error) => {\n          console.log(`Error Populating Database: ${error.message}.`);\n        },\n        () => {\n          console.log(`Successfully populated DB in ${Date.now() - startTime} millis.`);\n        }\n      );\n    } else {\n      // Mobile.\n      const sql = songsTable as SQLiteObject;\n      const queries: string[] = [];\n      for (let i = 0; i < songs.length; ++i) {\n        const song = songs[i];\n        const query = getInsertSongQuery(song, bookId);\n        queries.push(query);\n      }\n      sql.sqlBatch(queries).then(() => {\n        console.log(`Successfully Populated DB in ${Date.now() - startTime} millis.`);\n      });\n    }\n  } catch (e) {\n    console.log(`SQL query error: Could not Populate Database, ${e}, ${e.message}.`);\n  }\n}\n\n/**\n * Gets the query to insert a song based on the song object and bookId.\n */\nfunction getInsertSongQuery(song: Song, bookId: string): string {\n  return `INSERT INTO ${SONGS_TABLE} (${SONG_NUMBER}, ${BOOK_ID}, ${NUM_HITS}, ${LAST_USED}, ${FAVORITED}, ${AUTHOR}, ${TITLE}, ${LYRICS})\n  SELECT ${song.songNumber}, '${bookId}', 0, 0, 'false', '${formatStringForSql(song.author)}', '${formatStringForSql(\n    song.title\n  )}', '${formatStringForSql(\n    JSON.stringify(song.lyrics)\n  )}' WHERE NOT EXISTS (SELECT 1 FROM ${SONGS_TABLE} WHERE ${BOOK_ID}='${bookId}' AND ${SONG_NUMBER}=${\n    song.songNumber\n  })`;\n}\n\n/**\n * Runs a SQL Query which reads from the DB.\n *\n * @param query - SQL Query to be executed.\n * @param descriptor - Little message about the query, solely for debugging purposes.\n * @param callback - Function that takes a list of songs as a parameter and returns anything.\n * When the SQL Query gets the rows from the DB, it will call the callback function with the retrieved data.\n *\n * This function itself does not return anything.\n */\nfunction runQueryWithCallback(query: string, descriptor: string, callback: (songs: DbSong[]) => void): void {\n  const songsTable = DbManager.getInstance().getSongsTable;\n  if (songsTable === undefined) {\n    console.log(`Cannot run SQL ${descriptor} because DB is undefined.`);\n    callback([]);\n    return;\n  }\n  try {\n    const startTime = Date.now();\n    if (!isCordova()) {\n      // Not Mobile:\n      const sql = songsTable as Database;\n      sql.transaction((transaction) => {\n        transaction.executeSql(\n          query,\n          [],\n          (_transaction, response) => {\n            const songs = mapToSongList(response);\n            console.log(`Returning ${response.rows.length} rows on ${descriptor} in ${Date.now() - startTime} millis.`);\n            callback(songs);\n          },\n          (_transaction, error) => {\n            console.log(`WebSQL query error: ${descriptor}, ${error.message}.`);\n            callback([]);\n            return false;\n          }\n        );\n      });\n    } else {\n      // Mobile:\n      const sql = songsTable as SQLiteObject;\n      sql.executeSql(query, []).then((response) => {\n        const songs = mapToSongList(response);\n        console.log(`Returning ${response.rows.length} rows on ${descriptor} in ${Date.now() - startTime} millis.`);\n        callback(songs);\n      });\n    }\n  } catch (e) {\n    console.log(`SQL query error: ${descriptor}, ${e}.`);\n    callback([]);\n  }\n}\n\n/**\n * Runs a SQL Query where no return value is expected.\n */\nfunction runQuery(query: string, descriptor: string): void {\n  const songsTable = DbManager.getInstance().getSongsTable;\n  if (songsTable === undefined) {\n    console.log(`Cannot run SQL ${descriptor} because DB is undefined.`);\n    return;\n  }\n  try {\n    const startTime = Date.now();\n    if (!isCordova()) {\n      // Not Mobile:\n      const sql = songsTable as Database;\n      sql.transaction((transaction) => {\n        transaction.executeSql(\n          query,\n          [],\n          () => {\n            console.log(`Successfully ran query ${descriptor} in ${Date.now() - startTime} millis.`);\n          },\n          (_transaction, error) => {\n            console.log(`WebSQL query error: ${descriptor}, ${error.message}.`);\n            return false;\n          }\n        );\n      });\n    } else {\n      // Mobile:\n      const sql = songsTable as SQLiteObject;\n      sql.executeSql(query, []).then(() => {\n        console.log(`Successfully ran query ${descriptor} in ${Date.now() - startTime} millis.`);\n      });\n    }\n  } catch (e) {\n    console.log(`SQL query error: ${descriptor}, ${e}.`);\n  }\n}\n\n/**\n * Wrapper for running a query where only 1 return value is expected.\n */\nfunction runQuerySingle(query: string, descriptor: string, callback: (song: DbSong | null) => void): void {\n  runQueryWithCallback(query, descriptor, (songs: DbSong[]) => {\n    if (songs.length >= 1) {\n      callback(songs[0]);\n    } else {\n      callback(null);\n    }\n  });\n}\n\n/**\n * Formats a string with single quotes to using escape characters for SQL input.\n * The returned string must be surrounded by double quotes in the sql query.\n */\nfunction formatStringForSql(value: string): string {\n  return value.replace(/'/g, \"''\");\n}\n\n/**\n * Maps a list of rows from the DB to a list of DbSongs.\n */\nfunction mapToSongList(rows: SQLResultSet): DbSong[] {\n  const songs: DbSong[] = [];\n  for (let i = 0; i < rows.rows.length; i++) {\n    songs.push(mapToDbSong(rows.rows.item(i)));\n  }\n  return songs;\n}\n\n/**\n * Maps a DB Row from the songs table to a DbSong Object.\n */\nfunction mapToDbSong(row: { [x: string]: string | number | boolean }): DbSong {\n  return new DbSong(\n    row[SONG_NUMBER] as number,\n    row[BOOK_ID] as string,\n    row[NUM_HITS] as number,\n    row[LAST_USED] as number,\n    row[FAVORITED] as boolean,\n    row[AUTHOR] as string,\n    row[TITLE] as string,\n    row[LYRICS] as string\n  );\n}\n","import {\n  IonList,\n  IonCard,\n  IonCardTitle,\n  IonCardSubtitle,\n  IonLabel,\n  IonItem,\n  IonInfiniteScroll,\n  IonInfiniteScrollContent,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { updateSongHits } from \"../database/SongsTable\";\nimport { DbSong } from \"../models/DbSong\";\nimport \"./Components.css\";\n\ninterface SearchViewProps {\n  songs: DbSong[];\n}\n\n/**\n * Search View.\n */\nconst SearchView: React.FC<SearchViewProps> = (props: SearchViewProps) => {\n  const { bookId } = useParams<{ bookId: string }>();\n  const [songCards, setSongCards] = useState<JSX.Element[]>([]);\n  const [songCardsIterator] = useState(props.songs.entries());\n\n  const history = useHistory();\n\n  if (songCards.length === 0) {\n    LoadSongs(songCardsIterator, 20);\n  }\n  return songCards.length > 0 ? (\n    <div>\n      <IonList id=\"searchViewSongList\">{songCards}</IonList>\n      <IonInfiniteScroll onIonInfinite={LoadMoreSongs}>\n        <IonInfiniteScrollContent\n          loadingSpinner=\"bubbles\"\n          loadingText=\"Loading more songs...\"\n        ></IonInfiniteScrollContent>\n      </IonInfiniteScroll>\n    </div>\n  ) : (\n    <IonItem>\n      <IonLabel>No results found</IonLabel>\n    </IonItem>\n  );\n\n  function LoadMoreSongs(event: CustomEvent<void>) {\n    const target = event.target as HTMLIonInfiniteScrollElement;\n    if (!LoadSongs(songCardsIterator, 10)) {\n      target.disabled = true;\n    }\n    setSongCards(Array.from(songCards));\n    target.complete();\n  }\n\n  function LoadSongs(songIterator: IterableIterator<[number, DbSong]>, count: number): boolean {\n    while (count > 0) {\n      const nextSong = songIterator.next();\n      if (nextSong.done) {\n        return false;\n      }\n      const song = nextSong.value[1];\n      songCards.push(GenerateSongCard(song));\n      count--;\n    }\n\n    return true;\n  }\n\n  function GenerateSongCard(song: DbSong) {\n    return (\n      <IonCard\n        key={song.songNumber}\n        onClick={() => {\n          updateSongHits(song.songNumber);\n          history.push(`/${bookId}/${song.songNumber}`);\n        }}\n        className=\"hymnalListView\"\n      >\n        <IonCardTitle>\n          {song.songNumber}. {song.title}\n        </IonCardTitle>\n        <IonCardSubtitle>{song.author}</IonCardSubtitle>\n      </IonCard>\n    );\n  }\n};\n\nexport default SearchView;\n","import { IonContent, IonPage, IonHeader, IonInput, IonItem } from \"@ionic/react\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport React, { useEffect, useState } from \"react\";\nimport SearchView from \"../components/SearchView\";\nimport { useHistory } from \"react-router-dom\";\nimport { SHL_BOOK_ID } from \"../utils/SongUtils\";\nimport { fetchSongsAndPopulateSongsTable, listSongsBySearchText } from \"../database/SongsTable\";\nimport { DbSong, sortDbSongs } from \"../models/DbSong\";\nimport { getSimilarity, isNumeric } from \"../utils/StringUtils\";\nimport { DbManager } from \"../database/DbManager\";\n\nconst MATCH_THRESHOLD = 0.25;\n\n/**\n * Book Page Component.\n *\n * Use 'useState' for dynamic variables.\n * When the variable changes, the places where it's being used are automatically re-rendered.\n */\nconst BookPage: React.FC = () => {\n  // the search string inputted by the user\n  const [searchString, setSearchString] = useState<string>(\"\");\n  const [songs, setSongs] = useState<DbSong[]>([]);\n\n  useEffect(() => {\n    const timeOutId = setTimeout(() => {\n      listSongsBySearchText(searchString, (songs) => {\n        if (songs.length === 0 && searchString === \"\") {\n          // The Database did not return anything, so fetch songs list from online and try to populate the DB for next time.\n          fetchSongsAndPopulateSongsTable()\n            .then((songs) => (songs ? songs : []))\n            .then((songs) =>\n              songs.map((song) => {\n                return new DbSong(song.songNumber, SHL_BOOK_ID, 0, 0, false, song.author, song.title, song.lyrics);\n              })\n            )\n            .then((songs) => setSongs(songs));\n        } else if (songs.length === 0 && !DbManager.isInitialized()) {\n          fetchSongsAndPopulateSongsTable()\n            .then((songs) => (songs ? songs : []))\n            .then((songs) => {\n              if (isNumeric(searchString)) {\n                return songs[+searchString - 1] ? [songs[+searchString - 1]] : [];\n              } else {\n                return songs.filter(\n                  (song) =>\n                    getSimilarity(song.title, searchString) > MATCH_THRESHOLD ||\n                    getSimilarity(song.author, searchString) > MATCH_THRESHOLD\n                );\n              }\n            })\n            .then((songs) =>\n              songs.map((song) => {\n                return new DbSong(song.songNumber, SHL_BOOK_ID, 0, 0, false, song.author, song.title, song.lyrics);\n              })\n            )\n            .then((songs) => sortDbSongs(songs, searchString))\n            .then((songs) => setSongs(songs));\n        } else {\n          setSongs(songs);\n        }\n      });\n    }, 200);\n    return () => clearTimeout(timeOutId);\n  }, [searchString]);\n\n  const history = useHistory();\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <NavigationBar backButtonOnClick={() => history.push(\"/\")} />\n      </IonHeader>\n      <IonItem>\n        <IonInput\n          id=\"searchBar\"\n          type=\"search\"\n          value={searchString}\n          placeholder=\"Search for a song\"\n          onIonChange={(word) => setSearchString(word.detail.value as string)}\n        ></IonInput>\n      </IonItem>\n      {/* The key here will trigger a re-initialization of a new searchView when it changes. */}\n      <IonContent>\n        <SearchView key={searchString + songs.length} songs={songs} />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default BookPage;\n","import ReactGA from \"react-ga\";\n\nconst StreamID = \"UA-183902236-1\";\n\nexport const initGA = (): void => {\n  ReactGA.initialize(StreamID);\n};\n\nexport const PageView = (): void => {\n  ReactGA.pageview(window.location.pathname + window.location.search);\n  console.log(\"Page viewed\");\n};\n\n/**\n * Event - Add custom tracking event.\n * @param {string} category\n * @param {string} action\n * @param {string} label\n */\n\nexport const Event = (category: string, action: string, label: string): void => {\n  ReactGA.event({\n    category: category,\n    action: action,\n    label: label,\n  });\n};\n","import { SongViewMode } from \"../utils/SongUtils\";\nimport { Event } from \"./GoogleAnalytics\";\n\nexport function triggerSongView(songNumber: number, mode: SongViewMode): void {\n  try {\n    Event(\"INTERACTION\", `Song viewed(${SongViewMode[mode]})`, songNumber.toString());\n    console.log(`Song number: ${String(songNumber)} viewed in ${SongViewMode[mode]} mode`);\n  } catch (e) {\n    console.error(e);\n  }\n}\n","import { IonCard, IonCardContent, IonCardHeader, IonCardTitle, IonItem, IonLabel } from \"@ionic/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { SongViewMode } from \"../utils/SongUtils\";\nimport { fetchSongsAndPopulateSongsTable, getSong } from \"../database/SongsTable\";\nimport { DbSong, PLACEHOLDER_SONG } from \"../models/DbSong\";\nimport \"./Components.css\";\n//Import Event tracking\nimport { triggerSongView } from \"../tracking/EventFunctions\";\n\ninterface LyricViewProps {\n  songNumber: number;\n}\n\n/**\n * Lyric Viewer React Functional Component.\n */\nconst LyricView: React.FC<LyricViewProps> = (props: LyricViewProps) => {\n  const [song, setSong] = useState<DbSong>(PLACEHOLDER_SONG);\n\n  useEffect(() => {\n    triggerSongView(props.songNumber, SongViewMode.Lyrics);\n    getSong(props.songNumber, (song) => {\n      if (song) {\n        setSong(song);\n      } else {\n        fetchSongsAndPopulateSongsTable()\n          .then((songs) => (songs ? songs : []))\n          .then((songs) => songs[props.songNumber - 1])\n          .then((song) =>\n            song\n              ? new DbSong(props.songNumber, \"\", 0, 0, false, song.author, song.title, JSON.stringify(song.lyrics))\n              : PLACEHOLDER_SONG\n          )\n          .then((song) => setSong(song));\n      }\n    });\n  }, []);\n\n  return (\n    <IonCard id=\"lyricViewCard\">\n      <IonCardHeader>\n        <IonCardTitle key={song?.title}>{song?.title}</IonCardTitle>\n      </IonCardHeader>\n      <IonCardContent key={song?.lyrics}>{song ? getLyrics(song) : song}</IonCardContent>\n    </IonCard>\n  );\n\n  /**\n   * Parses all verse of the song to a string.\n   */\n  function getLyrics(song: DbSong): JSX.Element[] {\n    const songLyrics = JSON.parse(song.lyrics);\n    const verses = Object.keys(songLyrics);\n    const lyrics: JSX.Element[] = [];\n    let key = 0;\n    verses.forEach((versenumber) => {\n      lyrics.push(<IonLabel key={key}>{getVerseText(versenumber)}</IonLabel>);\n      key++;\n      songLyrics[versenumber].forEach((line: string) => {\n        lyrics.push(\n          <IonItem key={key} lines=\"none\">\n            <IonLabel className=\"ion-text-wrap\">{line}</IonLabel>\n          </IonItem>\n        );\n        key++;\n      });\n    });\n\n    return lyrics;\n  }\n\n  function getVerseText(verse: string) {\n    return verse\n      .toLowerCase()\n      .replace(\"v\", \"Verse \")\n      .replace(\"c\", \"Chorus \")\n      .replace(\"b\", \"Bridge \")\n      .replace(\"p\", \"Pre-Chorus \");\n  }\n};\n\nexport default LyricView;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Components.css\";\nimport { makeThreeDigits, SongViewMode } from \"../utils/SongUtils\";\nimport { IonToggle } from \"@ionic/react\";\nimport { isBrowser } from \"../utils/PlatformUtils\";\n//Import Event tracking\nimport { triggerSongView } from \"../tracking/EventFunctions\";\n\nconst baseUrl = \"https://raw.githubusercontent.com/Church-Life-Apps/Resources/master/resources/images/\";\nconst hymnalPart = \"shl/SHL_\"; // This part can change when red book is added\nconst imageSuffix = \".png\";\nconst alt = \"No Song Found\";\n\nconst songsWithTwoTunes = [156, 216, 278, 478];\n\n// Props are kind of like the parameters for the constructor of this class.\ninterface MusicViewProps {\n  songNumber: number;\n}\n\n/**\n * Song Viewer React Functional Component.\n */\nconst MusicView: React.FC<MusicViewProps> = (props: MusicViewProps) => {\n  const widthPixels = isBrowser() ? window.innerWidth / 2 : window.innerWidth;\n  const [secondTune, setSecondTune] = useState<boolean>(false);\n  const [width, setWidth] = useState<number>(widthPixels);\n  const [zoomed, setZoomed] = useState<boolean>(false);\n\n  const songHasTwoTunes = songsWithTwoTunes.includes(props.songNumber);\n\n  const secondTuneSuffix = songHasTwoTunes && secondTune ? \"-B\" : \"\";\n\n  const url = baseUrl + hymnalPart + makeThreeDigits(props.songNumber) + secondTuneSuffix + imageSuffix;\n\n  useEffect(() => {\n    triggerSongView(props.songNumber, SongViewMode.Music);\n  }, [props.songNumber]);\n\n  // TODO: Add Pinch and Zoom to image.\n  return (\n    <div>\n      {/* Second Tune Toggler  */}\n      {songHasTwoTunes && (\n        <div id=\"songToggler\">\n          <IonToggle checked={secondTune} onIonChange={() => setSecondTune(!secondTune)} />\n        </div>\n      )}\n\n      {/* image */}\n      {/* <TransformWrapper>\n        <TransformComponent> */}\n      <img\n        style={{ width: width }}\n        id=\"musicView\"\n        onDoubleClick={() => {\n          if (zoomed) {\n            setWidth(widthPixels);\n          } else setWidth(widthPixels * 2);\n          setZoomed(!zoomed);\n        }}\n        src={url}\n        alt={alt}\n      />\n      {/* </TransformComponent>\n      </TransformWrapper> */}\n    </div>\n  );\n};\n\nexport default MusicView;\n","import { IonContent, IonPage, IonHeader } from \"@ionic/react\";\nimport { SongViewMode } from \"../utils/SongUtils\";\nimport LyricView from \"../components/LyricView\";\nimport MusicView from \"../components/MusicView\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport React, { useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n//Import Event tracking\nimport { Event } from \"../tracking/GoogleAnalytics\";\n\n/**\n * Song Page Component.\n *\n * Use 'useState' for dynamic variables.\n * When the variable changes, the places where it's being used are automatically re-rendered.\n */\nconst SongPage: React.FC = () => {\n  const { bookId, songId } = useParams<{ bookId: string; songId: string }>();\n  const history = useHistory();\n\n  // when in song view, use music view or lyrics view\n  const [songViewMode, setSongViewMode] = useState<SongViewMode>(SongViewMode.Music);\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <NavigationBar\n          backButtonOnClick={() => {\n            history.push(`/${bookId}`);\n          }}\n          toggleSongModeOnClick={ToggleSongMode}\n        />\n      </IonHeader>\n\n      <IonContent>\n        {/* TODO: Add error handling in case of non number song Id */}\n        {RenderSong(+songId)}\n      </IonContent>\n    </IonPage>\n  );\n\n  function RenderSong(songNumber: number) {\n    if (songViewMode === SongViewMode.Music) {\n      return <MusicView songNumber={songNumber} />;\n    } else {\n      return <LyricView songNumber={songNumber} />;\n    }\n  }\n\n  function ToggleSongMode() {\n    if (songViewMode === SongViewMode.Music) {\n      setSongViewMode(SongViewMode.Lyrics);\n    } else {\n      setSongViewMode(SongViewMode.Music);\n    }\n    try {\n      Event(\"INTERACTION\", \"Songmode is toggled\", \"SongMode_Toggle\");\n    } catch (e) {\n      console.error(e);\n    }\n  }\n};\n\nexport default SongPage;\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\n/* Core CSS required for Ionic components to work properly */\nimport \"@ionic/react/css/core.css\";\n\n/* Basic CSS for apps built with Ionic */\nimport \"@ionic/react/css/normalize.css\";\nimport \"@ionic/react/css/structure.css\";\nimport \"@ionic/react/css/typography.css\";\n\n/* Optional CSS utils that can be commented out */\nimport \"@ionic/react/css/padding.css\";\nimport \"@ionic/react/css/float-elements.css\";\nimport \"@ionic/react/css/text-alignment.css\";\nimport \"@ionic/react/css/text-transformation.css\";\nimport \"@ionic/react/css/flex-utils.css\";\nimport \"@ionic/react/css/display.css\";\n\n/* Theme variables */\nimport \"./theme/variables.css\";\nimport HomePage from \"./pages/HomePage\";\nimport BookPage from \"./pages/BookPage\";\nimport SongPage from \"./pages/SongPage\";\nimport { DbManager } from \"./database/DbManager\";\nimport { initGA, PageView } from \"./tracking/GoogleAnalytics\";\nimport { logPlatforms } from \"./utils/PlatformUtils\";\n\ntry {\n  initGA();\n  PageView();\n} catch (e) {\n  console.error(e);\n}\n\nexport const AppName = \"Hymnal App\";\n\nconst App: React.FC = () => {\n  DbManager.getInstance();\n  logPlatforms();\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" component={HomePage} exact />\n        <Route path=\"/:bookId\" component={BookPage} exact />\n        <Route path=\"/:bookId/:songId\" component={SongPage} exact />\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}